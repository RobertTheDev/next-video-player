generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Video {
  id        String   @unique @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  duration      Int    @default(0)
  title         String
  totalComments Int    @default(0)
  totalDislikes Int    @default(0)
  totalLikes    Int    @default(0)
  totalViews    Int    @default(0)

  thumbnail   VideoThumbnail? @relation(fields: [thumbnailId], references: [id])
  thumbnailId String          @unique
  channel     Channel?        @relation(fields: [channelId], references: [id])
  channelId   String

  playlistedVideos PlaylistedVideo[]
  videoComments    VideoComment[]
  videoLikes       VideoLike[]
  videoSaves       VideoSave[]
}

model VideoComment {
  id        String   @unique @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  content String

  channel   Channel? @relation(fields: [channelId], references: [id])
  channelId String
  video     Video?   @relation(fields: [videoId], references: [id])
  videoId   String
}

model VideoThumbnail {
  id        String   @unique @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  alt String?
  url String

  video Video?
}

model Channel {
  id        String   @unique @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name        String
  subscribers Int    @default(0)

  image   ChannelImage? @relation(fields: [imageId], references: [id])
  imageId String?       @unique

  videos         Video[]
  videoComments  VideoComment[]
  videoLikes     VideoLike[]
  videoPlaylists VideoPlaylist[]
  videoSaves     VideoSave[]
}

model ChannelImage {
  id        String   @unique @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  alt String?
  url String

  channel Channel?
}

model VideoLike {
  id        String   @unique @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  channel   Channel? @relation(fields: [channelId], references: [id])
  channelId String
  video     Video?   @relation(fields: [videoId], references: [id])
  videoId   String
}

model VideoSave {
  id        String   @unique @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  channel   Channel? @relation(fields: [channelId], references: [id])
  channelId String
  video     Video?   @relation(fields: [videoId], references: [id])
  videoId   String
}

model VideoPlaylist {
  id        String   @unique @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String

  channel   Channel? @relation(fields: [channelId], references: [id])
  channelId String

  playlistedVideos PlaylistedVideo[]
}

model PlaylistedVideo {
  id        String   @unique @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  video           Video?         @relation(fields: [videoId], references: [id])
  videoId         String
  videoPlaylist   VideoPlaylist? @relation(fields: [videoPlaylistId], references: [id])
  videoPlaylistId String
}

// model Notification {
//   id        String   @unique @default(uuid())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   channel   Channel @relation(fields: [channelId], references: [id])
//   channelId String
//   channel   Channel? @relation(fields: [channelId], references: [id])
//   channelId String?
// }

// model ChannelSubscriber {
//     id        String   @unique @default(uuid())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

// }

// Notification
// subscribe
